// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: syncer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { Empty } from "./google/protobuf/empty";
import { BoolValue } from "./google/protobuf/wrappers";

export const protobufPackage = "syncer";

export enum MessageType {
  CLIPBOARD = 0,
  GENERIC_TEXT = 1,
  CONNECTED_DEVICES = 2,
  UNRECOGNIZED = -1,
}

export function messageTypeFromJSON(object: any): MessageType {
  switch (object) {
    case 0:
    case "CLIPBOARD":
      return MessageType.CLIPBOARD;
    case 1:
    case "GENERIC_TEXT":
      return MessageType.GENERIC_TEXT;
    case 2:
    case "CONNECTED_DEVICES":
      return MessageType.CONNECTED_DEVICES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageType.UNRECOGNIZED;
  }
}

export function messageTypeToJSON(object: MessageType): string {
  switch (object) {
    case MessageType.CLIPBOARD:
      return "CLIPBOARD";
    case MessageType.GENERIC_TEXT:
      return "GENERIC_TEXT";
    case MessageType.CONNECTED_DEVICES:
      return "CONNECTED_DEVICES";
    case MessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ClipboardMessage {
  content: string;
}

export interface DeviceInfo {
  id: string;
  ip: string;
  name: string;
  platform: string;
  connected: boolean;
  lastSeen: number;
}

export interface ConnectedDevices {
  devices: DeviceInfo[];
}

export interface ClientMessage {
  id: string;
  createdAt: number;
  type: MessageType;
  clipboard?: ClipboardMessage | undefined;
  genericText?: GenericTextMessage | undefined;
  empty?: Empty | undefined;
}

export interface ServerMessage {
  id: string;
  senderId: string;
  createdAt: number;
  type: MessageType;
  Clipboard?: ClipboardMessage | undefined;
  ConnectedDevices?: ConnectedDevices | undefined;
  GenericText?: GenericTextMessage | undefined;
}

export interface GenericTextMessage {
  text: string;
}

function createBaseClipboardMessage(): ClipboardMessage {
  return { content: "" };
}

export const ClipboardMessage: MessageFns<ClipboardMessage> = {
  encode(message: ClipboardMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== "") {
      writer.uint32(10).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClipboardMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClipboardMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClipboardMessage {
    return { content: isSet(object.content) ? globalThis.String(object.content) : "" };
  },

  toJSON(message: ClipboardMessage): unknown {
    const obj: any = {};
    if (message.content !== "") {
      obj.content = message.content;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClipboardMessage>, I>>(base?: I): ClipboardMessage {
    return ClipboardMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClipboardMessage>, I>>(object: I): ClipboardMessage {
    const message = createBaseClipboardMessage();
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseDeviceInfo(): DeviceInfo {
  return { id: "", ip: "", name: "", platform: "", connected: false, lastSeen: 0 };
}

export const DeviceInfo: MessageFns<DeviceInfo> = {
  encode(message: DeviceInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.ip !== "") {
      writer.uint32(18).string(message.ip);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.platform !== "") {
      writer.uint32(34).string(message.platform);
    }
    if (message.connected !== false) {
      writer.uint32(40).bool(message.connected);
    }
    if (message.lastSeen !== 0) {
      writer.uint32(48).int64(message.lastSeen);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.platform = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.connected = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.lastSeen = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceInfo {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
      connected: isSet(object.connected) ? globalThis.Boolean(object.connected) : false,
      lastSeen: isSet(object.lastSeen) ? globalThis.Number(object.lastSeen) : 0,
    };
  },

  toJSON(message: DeviceInfo): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.platform !== "") {
      obj.platform = message.platform;
    }
    if (message.connected !== false) {
      obj.connected = message.connected;
    }
    if (message.lastSeen !== 0) {
      obj.lastSeen = Math.round(message.lastSeen);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceInfo>, I>>(base?: I): DeviceInfo {
    return DeviceInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceInfo>, I>>(object: I): DeviceInfo {
    const message = createBaseDeviceInfo();
    message.id = object.id ?? "";
    message.ip = object.ip ?? "";
    message.name = object.name ?? "";
    message.platform = object.platform ?? "";
    message.connected = object.connected ?? false;
    message.lastSeen = object.lastSeen ?? 0;
    return message;
  },
};

function createBaseConnectedDevices(): ConnectedDevices {
  return { devices: [] };
}

export const ConnectedDevices: MessageFns<ConnectedDevices> = {
  encode(message: ConnectedDevices, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.devices) {
      DeviceInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectedDevices {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectedDevices();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.devices.push(DeviceInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectedDevices {
    return {
      devices: globalThis.Array.isArray(object?.devices) ? object.devices.map((e: any) => DeviceInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: ConnectedDevices): unknown {
    const obj: any = {};
    if (message.devices?.length) {
      obj.devices = message.devices.map((e) => DeviceInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConnectedDevices>, I>>(base?: I): ConnectedDevices {
    return ConnectedDevices.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConnectedDevices>, I>>(object: I): ConnectedDevices {
    const message = createBaseConnectedDevices();
    message.devices = object.devices?.map((e) => DeviceInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseClientMessage(): ClientMessage {
  return { id: "", createdAt: 0, type: 0, clipboard: undefined, genericText: undefined, empty: undefined };
}

export const ClientMessage: MessageFns<ClientMessage> = {
  encode(message: ClientMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.createdAt !== 0) {
      writer.uint32(16).int64(message.createdAt);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.clipboard !== undefined) {
      ClipboardMessage.encode(message.clipboard, writer.uint32(34).fork()).join();
    }
    if (message.genericText !== undefined) {
      GenericTextMessage.encode(message.genericText, writer.uint32(42).fork()).join();
    }
    if (message.empty !== undefined) {
      Empty.encode(message.empty, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clipboard = ClipboardMessage.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.genericText = GenericTextMessage.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.empty = Empty.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      type: isSet(object.type) ? messageTypeFromJSON(object.type) : 0,
      clipboard: isSet(object.clipboard) ? ClipboardMessage.fromJSON(object.clipboard) : undefined,
      genericText: isSet(object.genericText) ? GenericTextMessage.fromJSON(object.genericText) : undefined,
      empty: isSet(object.empty) ? Empty.fromJSON(object.empty) : undefined,
    };
  },

  toJSON(message: ClientMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.type !== 0) {
      obj.type = messageTypeToJSON(message.type);
    }
    if (message.clipboard !== undefined) {
      obj.clipboard = ClipboardMessage.toJSON(message.clipboard);
    }
    if (message.genericText !== undefined) {
      obj.genericText = GenericTextMessage.toJSON(message.genericText);
    }
    if (message.empty !== undefined) {
      obj.empty = Empty.toJSON(message.empty);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientMessage>, I>>(base?: I): ClientMessage {
    return ClientMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientMessage>, I>>(object: I): ClientMessage {
    const message = createBaseClientMessage();
    message.id = object.id ?? "";
    message.createdAt = object.createdAt ?? 0;
    message.type = object.type ?? 0;
    message.clipboard = (object.clipboard !== undefined && object.clipboard !== null)
      ? ClipboardMessage.fromPartial(object.clipboard)
      : undefined;
    message.genericText = (object.genericText !== undefined && object.genericText !== null)
      ? GenericTextMessage.fromPartial(object.genericText)
      : undefined;
    message.empty = (object.empty !== undefined && object.empty !== null) ? Empty.fromPartial(object.empty) : undefined;
    return message;
  },
};

function createBaseServerMessage(): ServerMessage {
  return {
    id: "",
    senderId: "",
    createdAt: 0,
    type: 0,
    Clipboard: undefined,
    ConnectedDevices: undefined,
    GenericText: undefined,
  };
}

export const ServerMessage: MessageFns<ServerMessage> = {
  encode(message: ServerMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.senderId !== "") {
      writer.uint32(18).string(message.senderId);
    }
    if (message.createdAt !== 0) {
      writer.uint32(24).int64(message.createdAt);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.Clipboard !== undefined) {
      ClipboardMessage.encode(message.Clipboard, writer.uint32(42).fork()).join();
    }
    if (message.ConnectedDevices !== undefined) {
      ConnectedDevices.encode(message.ConnectedDevices, writer.uint32(50).fork()).join();
    }
    if (message.GenericText !== undefined) {
      GenericTextMessage.encode(message.GenericText, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.senderId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.Clipboard = ClipboardMessage.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.ConnectedDevices = ConnectedDevices.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.GenericText = GenericTextMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      senderId: isSet(object.senderId) ? globalThis.String(object.senderId) : "",
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      type: isSet(object.type) ? messageTypeFromJSON(object.type) : 0,
      Clipboard: isSet(object.Clipboard) ? ClipboardMessage.fromJSON(object.Clipboard) : undefined,
      ConnectedDevices: isSet(object.ConnectedDevices) ? ConnectedDevices.fromJSON(object.ConnectedDevices) : undefined,
      GenericText: isSet(object.GenericText) ? GenericTextMessage.fromJSON(object.GenericText) : undefined,
    };
  },

  toJSON(message: ServerMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.senderId !== "") {
      obj.senderId = message.senderId;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.type !== 0) {
      obj.type = messageTypeToJSON(message.type);
    }
    if (message.Clipboard !== undefined) {
      obj.Clipboard = ClipboardMessage.toJSON(message.Clipboard);
    }
    if (message.ConnectedDevices !== undefined) {
      obj.ConnectedDevices = ConnectedDevices.toJSON(message.ConnectedDevices);
    }
    if (message.GenericText !== undefined) {
      obj.GenericText = GenericTextMessage.toJSON(message.GenericText);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerMessage>, I>>(base?: I): ServerMessage {
    return ServerMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerMessage>, I>>(object: I): ServerMessage {
    const message = createBaseServerMessage();
    message.id = object.id ?? "";
    message.senderId = object.senderId ?? "";
    message.createdAt = object.createdAt ?? 0;
    message.type = object.type ?? 0;
    message.Clipboard = (object.Clipboard !== undefined && object.Clipboard !== null)
      ? ClipboardMessage.fromPartial(object.Clipboard)
      : undefined;
    message.ConnectedDevices = (object.ConnectedDevices !== undefined && object.ConnectedDevices !== null)
      ? ConnectedDevices.fromPartial(object.ConnectedDevices)
      : undefined;
    message.GenericText = (object.GenericText !== undefined && object.GenericText !== null)
      ? GenericTextMessage.fromPartial(object.GenericText)
      : undefined;
    return message;
  },
};

function createBaseGenericTextMessage(): GenericTextMessage {
  return { text: "" };
}

export const GenericTextMessage: MessageFns<GenericTextMessage> = {
  encode(message: GenericTextMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenericTextMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenericTextMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenericTextMessage {
    return { text: isSet(object.text) ? globalThis.String(object.text) : "" };
  },

  toJSON(message: GenericTextMessage): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenericTextMessage>, I>>(base?: I): GenericTextMessage {
    return GenericTextMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenericTextMessage>, I>>(object: I): GenericTextMessage {
    const message = createBaseGenericTextMessage();
    message.text = object.text ?? "";
    return message;
  },
};

export interface MessageService {
  StreamMessages(request: Empty): Observable<ServerMessage>;
  SendMessage(request: Observable<ClientMessage>): Promise<Empty>;
  IsReachable(request: Empty): Promise<BoolValue>;
}

export const MessageServiceServiceName = "syncer.MessageService";
export class MessageServiceClientImpl implements MessageService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MessageServiceServiceName;
    this.rpc = rpc;
    this.StreamMessages = this.StreamMessages.bind(this);
    this.SendMessage = this.SendMessage.bind(this);
    this.IsReachable = this.IsReachable.bind(this);
  }
  StreamMessages(request: Empty): Observable<ServerMessage> {
    const data = Empty.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamMessages", data);
    return result.pipe(map((data) => ServerMessage.decode(new BinaryReader(data))));
  }

  SendMessage(request: Observable<ClientMessage>): Promise<Empty> {
    const data = request.pipe(map((request) => ClientMessage.encode(request).finish()));
    const promise = this.rpc.clientStreamingRequest(this.service, "SendMessage", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }

  IsReachable(request: Empty): Promise<BoolValue> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "IsReachable", data);
    return promise.then((data) => BoolValue.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
