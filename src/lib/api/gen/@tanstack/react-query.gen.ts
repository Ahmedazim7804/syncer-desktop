// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getAccessTokenWithPasswordApiV1AuthLoginPost,
  getAccessTokenWithRefreshTokenApiV1AuthRefreshPost,
  getMeApiV1MeGet,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  GetAccessTokenWithPasswordApiV1AuthLoginPostData,
  GetAccessTokenWithPasswordApiV1AuthLoginPostError,
  GetAccessTokenWithPasswordApiV1AuthLoginPostResponse,
  GetAccessTokenWithRefreshTokenApiV1AuthRefreshPostData,
  GetAccessTokenWithRefreshTokenApiV1AuthRefreshPostResponse,
  GetMeApiV1MeGetData,
} from "../types.gen";
import type { AxiosError } from "axios";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getAccessTokenWithPasswordApiV1AuthLoginPostQueryKey = (
  options: Options<GetAccessTokenWithPasswordApiV1AuthLoginPostData>,
) => createQueryKey("getAccessTokenWithPasswordApiV1AuthLoginPost", options);

/**
 * Get Access Token With Password
 */
export const getAccessTokenWithPasswordApiV1AuthLoginPostOptions = (
  options: Options<GetAccessTokenWithPasswordApiV1AuthLoginPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAccessTokenWithPasswordApiV1AuthLoginPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAccessTokenWithPasswordApiV1AuthLoginPostQueryKey(options),
  });
};

/**
 * Get Access Token With Password
 */
export const getAccessTokenWithPasswordApiV1AuthLoginPostMutation = (
  options?: Partial<Options<GetAccessTokenWithPasswordApiV1AuthLoginPostData>>,
): UseMutationOptions<
  GetAccessTokenWithPasswordApiV1AuthLoginPostResponse,
  AxiosError<GetAccessTokenWithPasswordApiV1AuthLoginPostError>,
  Options<GetAccessTokenWithPasswordApiV1AuthLoginPostData>
> => {
  const mutationOptions: UseMutationOptions<
    GetAccessTokenWithPasswordApiV1AuthLoginPostResponse,
    AxiosError<GetAccessTokenWithPasswordApiV1AuthLoginPostError>,
    Options<GetAccessTokenWithPasswordApiV1AuthLoginPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await getAccessTokenWithPasswordApiV1AuthLoginPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAccessTokenWithRefreshTokenApiV1AuthRefreshPostQueryKey = (
  options?: Options<GetAccessTokenWithRefreshTokenApiV1AuthRefreshPostData>,
) =>
  createQueryKey("getAccessTokenWithRefreshTokenApiV1AuthRefreshPost", options);

/**
 * Get Access Token With Refresh Token
 */
export const getAccessTokenWithRefreshTokenApiV1AuthRefreshPostOptions = (
  options?: Options<GetAccessTokenWithRefreshTokenApiV1AuthRefreshPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAccessTokenWithRefreshTokenApiV1AuthRefreshPost(
        {
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        },
      );
      return data;
    },
    queryKey:
      getAccessTokenWithRefreshTokenApiV1AuthRefreshPostQueryKey(options),
  });
};

/**
 * Get Access Token With Refresh Token
 */
export const getAccessTokenWithRefreshTokenApiV1AuthRefreshPostMutation = (
  options?: Partial<
    Options<GetAccessTokenWithRefreshTokenApiV1AuthRefreshPostData>
  >,
): UseMutationOptions<
  GetAccessTokenWithRefreshTokenApiV1AuthRefreshPostResponse,
  AxiosError<DefaultError>,
  Options<GetAccessTokenWithRefreshTokenApiV1AuthRefreshPostData>
> => {
  const mutationOptions: UseMutationOptions<
    GetAccessTokenWithRefreshTokenApiV1AuthRefreshPostResponse,
    AxiosError<DefaultError>,
    Options<GetAccessTokenWithRefreshTokenApiV1AuthRefreshPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await getAccessTokenWithRefreshTokenApiV1AuthRefreshPost(
        {
          ...options,
          ...localOptions,
          throwOnError: true,
        },
      );
      return data;
    },
  };
  return mutationOptions;
};

export const getMeApiV1MeGetQueryKey = (
  options?: Options<GetMeApiV1MeGetData>,
) => createQueryKey("getMeApiV1MeGet", options);

/**
 * Get Me
 */
export const getMeApiV1MeGetOptions = (
  options?: Options<GetMeApiV1MeGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMeApiV1MeGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMeApiV1MeGetQueryKey(options),
  });
};
