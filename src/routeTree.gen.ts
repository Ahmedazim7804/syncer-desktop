/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DevicesIndexRouteImport } from './routes/devices/index'
import { Route as DevicesDeviceIdRouteImport } from './routes/devices/$deviceId'
import { Route as AuthAuthRouteImport } from './routes/_auth/_auth'
import { Route as AuthAuthLoginRouteImport } from './routes/_auth/_auth.login'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DevicesIndexRoute = DevicesIndexRouteImport.update({
  id: '/devices/',
  path: '/devices/',
  getParentRoute: () => rootRouteImport,
} as any)
const DevicesDeviceIdRoute = DevicesDeviceIdRouteImport.update({
  id: '/devices/$deviceId',
  path: '/devices/$deviceId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAuthRoute = AuthAuthRouteImport.update({
  id: '/_auth/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAuthLoginRoute = AuthAuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthAuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRoute
  '/devices': typeof DevicesIndexRoute
  '/login': typeof AuthAuthLoginRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRoute
  '/devices': typeof DevicesIndexRoute
  '/login': typeof AuthAuthLoginRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/_auth/_auth': typeof AuthAuthRouteWithChildren
  '/devices/$deviceId': typeof DevicesDeviceIdRoute
  '/devices/': typeof DevicesIndexRoute
  '/_auth/_auth/login': typeof AuthAuthLoginRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/devices/$deviceId' | '/devices' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/devices/$deviceId' | '/devices' | '/login'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/_auth/_auth'
    | '/devices/$deviceId'
    | '/devices/'
    | '/_auth/_auth/login'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AuthAuthRoute: typeof AuthAuthRouteWithChildren
  DevicesDeviceIdRoute: typeof DevicesDeviceIdRoute
  DevicesIndexRoute: typeof DevicesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/devices/': {
      id: '/devices/'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/devices/$deviceId': {
      id: '/devices/$deviceId'
      path: '/devices/$deviceId'
      fullPath: '/devices/$deviceId'
      preLoaderRoute: typeof DevicesDeviceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/_auth': {
      id: '/_auth/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/_auth/login': {
      id: '/_auth/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthAuthLoginRouteImport
      parentRoute: typeof AuthAuthRoute
    }
  }
}

interface AuthAuthRouteChildren {
  AuthAuthLoginRoute: typeof AuthAuthLoginRoute
}

const AuthAuthRouteChildren: AuthAuthRouteChildren = {
  AuthAuthLoginRoute: AuthAuthLoginRoute,
}

const AuthAuthRouteWithChildren = AuthAuthRoute._addFileChildren(
  AuthAuthRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AuthAuthRoute: AuthAuthRouteWithChildren,
  DevicesDeviceIdRoute: DevicesDeviceIdRoute,
  DevicesIndexRoute: DevicesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
